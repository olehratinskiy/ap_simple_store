openapi: 3.0.1
info:
  title: Simple Store API
  description: 'This is a simple online store api'
  contact:
    email: andrii.sydor.knm.2020@lpnu.ua
  version: 1.0.0
servers:
- url: http://localhost:5000
tags:
- name: item
  description: Everyting about the items
- name: store
  description: Access to Petstore orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /item:
    put:
      tags:
      - item
      summary: Update the item
      operationId: updateItem
      requestBody:
        description: Item info update in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        200:
          description: Success
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - simplestore_auth:
        - write:items
        - read:items
      x-codegen-request-body-name: body
    post:
      tags:
      - item
      summary: Add a new item to the store
      operationId: addItem
      requestBody:
        description: Item object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        201:
          description: Success
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - simplestore_auth:
        - write:items
        - read:items
      x-codegen-request-body-name: body
  /item/{itemId}:
    get:
      tags:
      - item
      summary: Find item by ID
      description: Returns a single item
      operationId: getItemById
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          maximum: 8.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
      security:
      - api_key: []
    put:
      tags:
      - item
      summary: Updates an item in the store with form data
      operationId: updateItemWithForm
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          maximum: 8.0
          minimum: 1.0
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                quantity:
                  type: integer
                  format: int64
                  description: Updated quantity of the item
                status:
                  type: string
                  description: Updated status of the item
                  example: sold out
      responses:
        200:
          description: Success
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - simplestore_auth:
        - write:items
        - read:items
    delete:
      tags:
      - item
      summary: Deletes an item
      operationId: deleteItem
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        schema:
          maximum: 8.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
      - simplestore_auth:
        - write:items
        - read:items
  /item/{itemId}/uploadImage:
    post:
      tags:
      - item
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: itemId
        in: path
        description: ID of item to update
        required: true
        schema:
          maximum: 8.0
          minimum: 1.0
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - simplestore_auth:
        - write:items
        - read:items
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a item
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the item
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
      security:
      - api_key: []
      x-codegen-request-body-name: body
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 8.         Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of item that needs to be fetched
        required: true
        schema:
          maximum: 8.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
      security:
      - api_key: []
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Success
          content: {}
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
      security:
      - api_key: []
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Item:
      required:
      - name
      - quantity
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: pencil
        quantity:
          type: integer
          format: int64
          example: 1
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        status:
          type: string
          description: item status in the store
          enum:
          - available
          - sold out
      xml:
        name: Item
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    simplestore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:5000
          scopes:
            write:items: modify items in your account
            read:items: read your items
    api_key:
      type: apiKey
      name: api_key
      in: header
